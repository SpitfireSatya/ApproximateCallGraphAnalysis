
import * as fs from 'fs';

const dir = fs.opendirSync('../');
dir.close(() => { });
dir.closeSync();
dir.read(() => { });
dir.readSync();

const dirent = readdirSync('../', { 'withFileTypes': true })[0];
dirent.isBlockDevice();
dirent.isCharacterDevice();
dirent.isDirectory();
dirent.isFIFO();
dirent.isFile();
dirent.isSocket();
dirent.isSymbolicLink();

const watcher = fs.watch('../');
watcher.close();

const stats = fs.statSync('../');
stats.isBlockDevice();
stats.isCharacterDevice();
stats.isDirectory();
stats.isFIFO();
stats.isFile();
stats.isSocket();
stats.isSymbolicLink();

fs.access("", () => { });
fs.accessSync();
fs.appendFile("", "", () => { });
fs.appendFileSync();
fs.chmod("", "", () => { });


fs.chmodSync();
fs.chown("", "", "", () => { });
fs.chownSync();
fs.close(fd, () => { });
fs.closeSync();

fs.copyFile("", "", () => { });
fs.copyFileSync();
fs.createReadStream();
fs.createWriteStream();
fs.exists("", () => { });
fs.existsSync();
fs.fchmod("", "", () => { });
fs.fchmodSync();
fs.fchown("", "", "", () => { });
fs.fchownSync();
fs.fdatasync("", () => { });
fs.fdatasyncSync();
fs.fstat("", () => { });
fs.fstatSync();
fs.fsync("", () => { });
fs.fsyncSync();
fs.ftruncate("", () => { });
fs.ftruncateSync();
fs.futimes("", "", "", () => { });
fs.futimesSync();
fs.lchmod("", "", () => { });
fs.lchmodSync();
fs.lchown("", "", "", () => { });
fs.lchownSync();
fs.link("", "", () => { });
fs.linkSync();
fs.lstat("", () => { });
fs.lstatSync();
fs.mkdir("", () => { });
fs.mkdirSync();
fs.mkdtemp("", () => { });
fs.mkdtempSync();
fs.open("", "", () => { });
fs.opendir("", () => { });
fs.opendirSync();
fs.openSync();
fs.read("", "", "", "", "", () => { });
fs.read("", () => { });
fs.readdir("", () => { });
fs.readdirSync();
fs.readFile("", () => { });


fs.readFileSync();
fs.readlink("", () => { });
fs.readlinkSync("");
fs.readSync();
fs.readSync();
fs.readv("", "", () => { });
fs.readvSync();
fs.realpath("", () => { });
fs.realpath.native("", () => { });
fs.realpathSync();
fs.realpathSync.native();
fs.rename("", "", () => { });
fs.renameSync();
fs.rmdir("", () => { });
fs.rmdirSync();
fs.stat("", () => { });
fs.statSync();
fs.symlink("", "", () => { });
fs.symlinkSync();
fs.truncate("", () => { });
fs.truncateSync();
fs.unlink("", () => { });
fs.unlinkSync();
fs.unwatchFile();
fs.utimes("", "", "", () => { });
fs.utimesSync();
fs.watch();

fs.watchFile();
fs.write("", "", () => { });
fs.write("", "", () => { });
fs.writeFile("", "", () => { });

fs.writeFileSync();
fs.writeSync();
fs.writeSync();
fs.writev("", "", () => { });
fs.writevSync();

const filehandle = fs.openSync('../');
filehandle.appendFile();
filehandle.chmod();
filehandle.chown();
filehandle.close();
filehandle.datasync();
filehandle.read();
filehandle.read();
filehandle.readFile();
filehandle.readv();
filehandle.stat();
filehandle.sync();
filehandle.truncate();
filehandle.utimes();
filehandle.write();
filehandle.write();
filehandle.writeFile();
filehandle.writev();

const fsPromises = fs.promises;
fsPromises.access();
fsPromises.appendFile();
fsPromises.chmod();
fsPromises.chown();
fsPromises.copyFile();
fsPromises.lchmod();
fsPromises.lchown();
fsPromises.link();
fsPromises.lstat();
fsPromises.mkdir();
fsPromises.mkdtemp();
fsPromises.open();
fsPromises.opendir();
fsPromises.readdir();
fsPromises.readFile();
fsPromises.readlink();
fsPromises.realpath();
fsPromises.rename();
fsPromises.rmdir();
fsPromises.stat();
fsPromises.symlink();
fsPromises.truncate();
fsPromises.unlink();
fsPromises.utimes();
fsPromises.writeFile();
